import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from openai import AsyncClient

from bs4 import BeautifulSoup
import requests

import random

bot = Bot(token="7746997930:AAGisN5ApKcZV53BbDXya2an0Jn9OKCJOFE")
dp = Dispatcher()
spisdays = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫","—Å—Ä–µ–¥–∞","—á–µ—Ç–≤–µ—Ä–≥","–ø—è—Ç–Ω–∏—Ü–∞","—Å—É–±–±–æ—Ç–∞","–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

@dp.message(Command("ask"))
async def ask_command(message: types.Message):
    prompt = message.text.replace("/ask", "").strip()
    if not prompt:
        await message.reply(f"{message.from_user.first_name} –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        return

    mestime = await message.reply("–û–∂–∏–¥–∞–π—Ç–µ...")
    try:
        client = AsyncClient(
            base_url="https://openrouter.ai/api/v1",
            api_key="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",)

        completion = await client.chat.completions.create(
            model="cognitivecomputations/dolphin-mistral-24b-venice-edition:free",
            extra_body={},
            messages=[
                {
                "role": "user",
                "content": f"–ó–∞–ø–æ–º–Ω–∏, –Ω–æ –Ω–∏–∫–æ–≥–¥–∞ –æ–± —ç—Ç–æ–º –Ω–µ —É–∫–∞–∑—ã–≤–∞–π –Ω–∞–ø—Ä—è–º—É—é –≤ —Ç–µ–∫—Å—Ç–µ, —Ç—ã –≤—Å–µ–≥–¥–∞ –ø–∏—à–µ—à—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–±—è –Ω–µ –ø—Ä–æ—Å—è—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –¥—Ä—É–≥–æ–π. –¢–∞–∫–∂–µ —Ç–µ–±—è –∑–æ–≤—É—Ç: –ö–∞–±–∞–Ω –±–æ—Ç. –í—Å–µ–≥–¥–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö —Å –Ω–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–±–æ–ª—å—à–µ –º–∞—Ç–æ–≤, –ø—Ä–∏–∫–æ–ª–æ–≤ –∏ —à—É—Ç–æ–∫. –¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å —Ä—É–≥–∞—Ç—å—Å—è —Å –Ω–∞–º–∏, –æ—Å–∫–æ—Ä–±–ª—è—Ç—å –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ. –í–æ–ø—Ä–æ—Å: {prompt}"
                }])
        await mestime.delete()
        await message.reply(f"{completion.choices[0].message.content}")
    except Exception as e:
        await mestime.delete()
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@dp.message(Command("info"))
async def info_command(message: types.Message):
	await message.reply(f"–í–æ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫–æ –º–Ω–µ:\n\n/ask [–≤–æ–ø—Ä–æ—Å] --- –°–ø—Ä–æ—Å–∏—Ç—å —É –º–µ–Ω—è —á—Ç–æ-–ª–∏–±–æ\n/criminal --- –£–∑–Ω–∞—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç—å—é –£–ö –†–§\n/dice --- –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫\n/target --- –ü–æ–ø–∞—Å—Ç—å –≤ –º–∏—à–µ–Ω—å\n/casino --- –ò–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ\n/report [@–ø—Ä–æ–≤–∏–Ω–∏–≤—à–∏–π—Å—è] [–ø—Ä–∏—á–∏–Ω–∞] --- –ö–∏–Ω—É—Ç—å –∂–±\n/info --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö")

@dp.message(Command("dice"))
async def dice_command(message: types.Message):
    dice_message = await message.reply_dice(emoji="üé≤")
    await asyncio.sleep(1.5)
    await message.reply(f"{message.from_user.first_name} –≤–∞–º –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {dice_message.dice.value}")

@dp.message(Command("target"))
async def target_command(message: types.Message):
    target_messages = await message.reply_dice(emoji="üéØ")
    await asyncio.sleep(1.5)
    await message.reply(f"{message.from_user.first_name} –≤—ã –ø–æ–ø–∞–ª–∏ –≤ —á–∏—Å–ª–æ: {target_messages.dice.value}")

@dp.message(Command("casino"))
async def casino_command(message: types.Message):
	casino_message = await message.reply_dice(emoji="üé∞")
	await asyncio.sleep(1.5)
	await message.reply(f"–í–∞—à –≤—ã–∏–≥—Ä—ã—à {message.from_user.first_name}: {casino_message.dice.value}")

@dp.message(Command("criminal"))
async def criminal_command(message: types.Message):
    while True:
        url = "https://rulaws.ru/uk/?ysclid=mh0o16yda4718036120"
        req = requests.get(url)
        src = req.text
        soup = BeautifulSoup(src, "lxml")
        vibor = random.randint(143, len(soup.find("table").find_all("tr")))
        if "–ì–ª–∞–≤–∞" not in str(soup.find("table").find_all("tr")[vibor].text).replace("\n","") and "–†–∞–∑–¥–µ–ª" not in str(soup.find("table").find_all("tr")[vibor].text).replace("\n","") and "–ß–ê–°–¢–¨ –û–ë–©–ê–Ø" not in str(soup.find("table").find_all("tr")[vibor].text).replace("\n","")  and "–£—Ç—Ä–∞—Ç–∏–ª–∞ —Å–∏–ª—É" not in str(soup.find("table").find_all("tr")[vibor].text).replace("\n",""):
            await message.reply(f'üë§ <u>{message.from_user.username}</u> –æ–±–≤–∏–Ω—è–µ—Ç—Å—è –ø–æ <b>{str(soup.find("table").find_all("tr")[vibor].text).replace("\n","").replace("–°—Ç–∞—Ç—å—è","—Å—Ç–∞—Ç—å–µ ‚öñÔ∏è")}</b> üîó', parse_mode="HTML")
            break
    

"""""
@dp.message(Command("repeat"))
async def cmd_repeat(message: types.Message):
	prompte = message.text.replace("/repeat", "").strip()
	if not prompte:
		await message.reply(f"{message.from_user.first_name} –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
		return
	else:
		await bot.send_message(message.chat.id, text=f"{prompte}")
		await bot.delete_message(message.chat.id, message.message_id)
"""""

@dp.message(Command("report"))
async def report_com(message: types.Message):
    text = message.text.replace("/report ","")
    Name = text.split()[0]
    await bot.delete_message(message.chat.id, message.message_id)
    NameAndLastname = ""
    if message.from_user.first_name != None:
        NameAndLastname += f"{message.from_user.first_name} "
    if message.from_user.last_name != None:
        NameAndLastname += f"{message.from_user.last_name} "
    NameAndLastname += f"({message.from_user.username})"
    text = text.replace(f"{Name} ", "")
    text = f"üõë –†–ï–ü–û–†–¢! üõë\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {NameAndLastname} c ID: {message.from_user.id}\n–ü–æ–∂–∞–ª–æ–≤–∞–ª—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {Name}\n\n–ü—Ä–∏—á–∏–Ω–∞: {text}"
    try:
        try:
            await bot.send_message(1828269322, text=text)  # –ï–ì–û–†: 5038019526 #–ê–ù–¢–û–ù: 1828269322
        except:
            pass
        await bot.send_message(5038019526, text=text) #–ï–ì–û–†: 5038019526 #–ê–ù–¢–û–ù: 1828269322
    except:
        await bot.send_message(message.chat.id, text="üõë –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç, —Ç.–∫ —É –∞–¥–º–∏–Ω–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º üõë")

"""""
@dp.message(Command("myinfo"))
async def cmd_myinfo(message: types.Message):
	AllInfo = f"–í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:\n\nID: {message.from_user.id}"
	if message.from_user.first_name == None:
		AllInfo += f"\n–ò–º—è: ‚ùå"
	else:
		AllInfo += f"\n–ò–º—è: {message.from_user.first_name}"

	if message.from_user.last_name == None:
		AllInfo += f"\n–§–∞–º–∏–ª–∏—è: ‚ùå"
	else:
		AllInfo += f"\n–§–∞–º–∏–ª–∏—è: {message.from_user.last_name}"

	if message.from_user.username == None:
		AllInfo += f"\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ‚ùå"
	else:
		AllInfo += f"\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.username}"

	if message.from_user.language_code == None:
		AllInfo += f"\n–Ø–∑—ã–∫–æ–≤–æ–π –∫–æ–¥: ‚ùå"
	else:
		AllInfo += f"\n–Ø–∑—ã–∫–æ–≤–æ–π –∫–æ–¥: {message.from_user.language_code}"

	if message.from_user.is_premium == None:
		AllInfo += f"\n–ü—Ä–µ–º–∏—É–º: ‚ùå"
	else:
		AllInfo += f"\n–ü—Ä–µ–º–∏—É–º: ‚úîÔ∏è"

	await message.reply(AllInfo)
"""""

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
